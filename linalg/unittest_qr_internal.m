function unittest_qr_internal
% UNITTEST_QR_INTERNAL Test the QR_INTERNAL function.
%
% Example (<a href="matlab:run_example unittest_qr_internal">run</a>)
%   unittest_qr_internal
%
% See also QR_INTERNAL, MUNIT_RUN_TESTSUITE 

%   Elmar Zander
%   Copyright 2010, Inst. of Scientific Computing
%
%   This program is free software: you can redistribute it and/or modify it
%   under the terms of the GNU General Public License as published by the
%   Free Software Foundation, either version 3 of the License, or (at your
%   option) any later version. 
%   See the GNU General Public License for more details. You should have
%   received a copy of the GNU General Public License along with this
%   program.  If not, see <http://www.gnu.org/licenses/>.

munit_set_function( 'qr_internal' );

n=100;
k=40;
A=rand(n,k);
F=rand(n,n);
M=F'*F;

[Q,R]=qr_internal( A );
assert_matrix( Q, {'unitary'}, 'qr_orth_Q' );
assert_matrix( R, {'upper triangular', 'square'}, 'qr_triu_R' );
assert_equals( A, Q*R, 'qr_eq_A_QR' );

[Q,R]=qr_internal( A, M );
assert_matrix( Q'*M*Q, 'identity', 'cqr_orth_Q' );
assert_matrix( R, {'upper triangular', 'square'}, 'cqr_triu_R' );
assert_equals( A, Q*R, 'cqr_eq_A_QR' );

M=diag(diag(M));
[Q,R]=qr_internal( A, M );
assert_matrix( Q'*M*Q, 'identity', 'dqr_orth_Q' );
assert_matrix( R, {'upper triangular', 'square'}, 'dqr_triu_R', 'exact', true );
assert_equals( A, Q*R, 'dqr_eq_A_QR' );

%%
n=100;
k=40;
k2=30;

A0=rand(n,k);
Q0=orth( A0 );
B=rand(n,k2);
v=exp(-3*(1:k));
korth=size(Q0,2);

A=[Q0 Q0*diag(v) B];
[Q,R]=qr_internal( A, [], korth );
assert_matrix( Q, {'unitary'}, 'qroc_orth_Q' );
assert_matrix( R, {'upper triangular'}, 'qroc_triu_R' );
assert_equals( A, Q*R, 'qroc_eq_A_QR' );

QQ=rand(k,100);
A=[Q0*diag(v) Q0*QQ B Q0*rand(k,100)];
[Q,R]=qr_internal( A, [], korth );
assert_matrix( Q, {'unitary'}, 'qroc_orth_Q' );
assert_matrix( R, {'upper triangular'}, 'qroc_triu_R' );
assert_equals( A, Q*R, 'qroc_eq_A_QR' );

%%
A=[
  -4.0026233992658039e-01  -6.2023657464535337e-02   5.0103488477825217e-03  -2.4912391503658460e-05  -6.3726585258503086e-06   5.3000923793943938e-08   3.0769093398567520e-21  -7.1169884741145811e-22   1.2039318786075878e-22  -2.0867901136040263e-24   1.5572970751642917e-33  -6.4569890725204682e-35  -2.4385733241659285e-35  -4.9377621404484424e-36   5.1625295346975266e-03   2.1279346829241127e-04   4.8885007597736903e-05  -6.7304707181363732e-08  -4.7164720530887887e-21   3.7660625837363064e-22  -1.4876196506558206e-22   5.1767306021018532e-24  -4.4154518984896683e-33   2.5174928139858174e-34  -5.0456124820387816e-35   5.9442019120464023e-36
  -7.3504152825004432e-01  -4.4259034218236203e-02   8.4897723795609673e-03  -3.9221569134358005e-05  -5.4923788273961350e-06   3.6276806685415160e-10   9.1230475800651096e-22   5.7998963645204368e-22   1.2623260336648252e-22   1.3105655092893403e-24  -1.3497942311039046e-33   8.8846632655161531e-35   5.5912838523590397e-35   3.6649094154333767e-36   9.7297868080010730e-03   1.6307345595677702e-04   6.5134019628977714e-05   2.4247659890576619e-07   2.8742973529062122e-21  -4.5819382938547848e-22  -1.3118331724244098e-22  -4.3770224785638691e-24   3.9316059608984106e-34  -2.2866438368418796e-34   8.1125621189933032e-35  -1.2658459282769535e-35
  -4.1979208003913060e-01  -1.1970789266084466e-02  -6.4039326334022187e-04   1.5502832291945105e-05  -6.7660398893818224e-06  -2.9183546309466610e-07  -2.1482856644559544e-21   1.1080870994088481e-21  -1.8669526448188774e-22  -3.8655988100669822e-25  -2.4375070805472145e-33  -9.0049027687042424e-35  -3.9864750494778299e-35   6.0366201262495628e-36   1.2336003744593172e-02  -5.6456387836999850e-06   2.1134355823432450e-05   2.8761185719885055e-07  -2.7662781359378820e-21  -7.0497027590271573e-22   2.9943498498293537e-22   1.4597639826389011e-24   5.2845697651742606e-33  -5.0188085700483180e-35  -8.0945401235143741e-35  -2.6867711274606531e-36
  -2.7604751328902805e-01   1.0678821952964317e-01  -6.5216306869053343e-03   5.4007358135405832e-06  -4.0675020906660120e-06  -3.1383097605523766e-07   2.1092194534404385e-22  -7.1666739349482837e-22   7.0548578537339112e-23   3.7851796671099267e-25   1.5516590799959969e-33  -2.0070021416741695e-34   5.3459796212241675e-35  -9.5964616813174046e-36   1.4680609179833475e-02  -3.4752214063035790e-04  -2.9321866266855014e-05   9.0568079577395642e-07  -4.8315915828127831e-21   4.5590577462092269e-22  -1.4272045171243392e-22   5.3629343294682075e-26  -8.8108882406248727e-34   6.4823228920234031e-34   6.2626980232315218e-35   3.1187301717339710e-35
  -3.8621302500885252e-01   4.0367231731928035e-02  -5.4151545103358510e-03   2.6825670073556884e-06   2.2128422702854925e-06  -3.4700596396599158e-07   2.6016834359465547e-21  -5.3487037976547159e-22   3.0664536005002090e-22  -3.1940215163982536e-25   1.5203073283256026e-34   2.1422711826281797e-34  -1.0057701306681230e-35   1.6423188502887024e-35   1.6929567927611577e-02  -1.3772266438956835e-04  -2.3187324835707703e-05   5.5998390003837946e-07  -4.3168306423347261e-21   1.8338256004741933e-22  -4.2006767988304470e-22   7.3993411287354724e-25  -2.3101041151905277e-33  -6.9201629173141309e-34  -5.7148672007309418e-36  -3.4800664456021155e-35
  -3.9889865119077167e-01  -6.6675173210738639e-02  -5.6040008385525187e-03  -1.6071730060841309e-05   1.2231140047238656e-06  -1.9023335369614304e-07   2.8656919597528255e-21  -3.1245749723431543e-22  -2.5062078237916952e-22   1.2944797844627211e-24  -4.7132751801661194e-34  -9.5642420696773495e-35  -4.5280003655626617e-35  -1.3911453200554666e-36   1.8512425525804524e-02   2.3090371210952193e-04  -5.5700557271923420e-06  -6.2585528016509146e-08  -6.4635721320080207e-21   9.7327999364885778e-23   4.1427301414790642e-22  -1.8249328648219061e-24   6.5556383279323485e-35   1.0489317609581673e-34  -3.2730904986286053e-35   1.6161766937861062e-35
  -5.2959583101777274e-01  -8.6176402390196000e-02  -3.6957177594837483e-03  -4.3812263383345963e-05   1.2625019307366197e-06  -3.7572681806265287e-08  -4.4628774316851972e-22   2.4890083853889093e-22  -2.8706541504499303e-22   1.7507496981384578e-25   2.4201629192710063e-33   2.1014042009949865e-34   3.6293357772047213e-36  -1.3627714508774039e-35   1.9841634613678036e-02   3.3136818192059633e-04   6.9032192397703047e-06  -1.3185100845162117e-07   9.9391020380207844e-22  -1.1300127240700339e-22   4.2773651690371669e-22   8.6223932149679586e-26  -2.2660317694830666e-33  -6.1783646224951061e-35   1.2505486799511198e-35   1.3641409096864389e-36
  -6.8959667716443107e-01   2.0369226102377808e-02  -1.6755740814675421e-03  -8.4427094620118865e-05   2.1934355848968837e-06   1.9018369902450760e-07  -4.1335041683094998e-21  -1.7505966383609773e-21   1.1992487166363933e-22   1.3793781958463942e-26  -1.4927499499272981e-33  -5.2889609751557910e-35  -1.7281620338128910e-35   2.0899172080459416e-36   2.0627795387860505e-02   5.5223807590656983e-05  -1.5740267705169078e-06   4.6324583290023624e-07   1.2789982810081435e-20   1.5208483746360399e-21  -3.5995471714743561e-22  -1.4418584253076378e-25   4.0958427727890192e-33   2.8954128899006440e-34   3.0418449063104620e-36  -9.6192029333184031e-36
  -4.3450413557554407e-01  -6.6554444691462877e-02  -5.8378159782926748e-03   1.3620964773709131e-05   2.1052169397219176e-06  -9.5497827408720165e-08  -3.7076875777767058e-21   1.5246412804021336e-21   2.5456462205901963e-22  -9.8509369602785103e-25   1.0822241609850014e-33  -9.1503964408922264e-36   1.4842952301171246e-35  -1.2185319732059635e-36   1.9793497212367797e-02   1.7900284023164315e-04  -6.1349300874878256e-06  -3.6688897101815398e-07   2.6437052365452251e-21  -9.5468128925575838e-22  -3.4937404554414921e-22   1.0532768693059263e-24  -4.2935456270739389e-34  -3.9724645641475434e-34  -2.0174462285130595e-35   1.5000679392736283e-35
  -6.1426290069946998e-01   1.0368434633098964e-01  -2.7785708245154474e-03  -4.2904837559403568e-05   3.6608325828278781e-06   3.3369580884371747e-07   2.6826940714882211e-21   1.4087422754909592e-21  -1.9418503021974782e-22  -5.1615156039224767e-25   6.3480159769554670e-34  -1.2089075052103709e-34   1.3046009318733772e-35   1.0022848511201831e-35   1.9201362958508880e-02  -2.7331471913823543e-04  -2.1812755891191471e-05   4.4505677638805935e-07   6.3397816887411837e-21  -1.1422716034774684e-21   3.6759255524633127e-22  -8.0585293207169741e-25  -4.2007323544514541e-33   6.2283439746870535e-34   1.5253882252537309e-35  -2.0090849351479280e-35
  -3.8503775488790482e-01  -6.4583224542025447e-02  -4.6723895819158201e-03   6.0364975048600962e-05   3.5679481121740596e-06   1.2460177093495794e-07   2.2200827688287891e-21  -3.5234268760981097e-22   2.3553843746614523e-23  -7.7771729867578574e-25  -4.1524757076809403e-33   2.7735083582063080e-37   3.3510184108676806e-35  -1.0873871648115838e-35   1.6997492071110176e-02   9.3440855499808527e-05  -3.6892943149000863e-06  -9.1472884709186764e-07  -5.5233363294408268e-21   1.4828409409011541e-22   3.2020587972049568e-24   2.4202329151678419e-24   3.8254015587967005e-33  -7.8989934168482256e-34   3.2126269160003404e-35   2.5660090409371414e-35
  -5.8385143399558616e-02   3.3541551438207992e-03  -1.0145504078018400e-02   4.9151637814179948e-05  -8.9393007348278862e-06   4.6230689207012032e-07  -2.0913697096922167e-22  -1.8047421974513982e-22   6.8152474169967659e-23   6.5072112247219889e-25   5.9755636306723376e-34   9.5376732145663600e-35  -1.2851168559139533e-35   3.5698877404412915e-36   1.4303310881671288e-02  -8.4536216271105359e-05  -2.1542562680479702e-05  -8.2154940266523971e-07  -1.0499677074763392e-20   1.5313138468840338e-22  -1.2570920133809901e-22  -9.5217104227023165e-25   1.6048464036845035e-33   6.5081287328005204e-34  -3.5342213720886948e-35  -3.3250574762013254e-35
  -6.9997394652592571e-01  -6.4589176795862985e-02   5.3937463478475499e-03   8.5783373656642264e-05   4.0617178519423505e-06   9.5362817645373133e-08  -1.0340828962728073e-22  -1.2657777366163315e-22   2.2187975555396551e-22   1.0423544394905368e-24   2.0932306795707779e-33  -1.4377370747361733e-34  -2.2491431840347400e-35   2.3797762204553064e-36   1.2949311967609296e-02   2.2823886315580819e-05   4.3179042381128718e-05  -9.0931520574927266e-07   2.6740896787499496e-21   9.4262735813198422e-23  -3.0413458782395449e-22  -2.9580719447708228e-24  -3.7219281933748728e-33  -1.5962038607952481e-34  -3.5733331616906996e-36   3.0871775181991178e-35
  -5.7633520635429314e-01   6.2593992538104506e-02   4.3928294176251506e-03   7.7718158667555864e-05   7.9030576531384186e-08  -4.0365800433228866e-08  -1.7724018285685803e-21  -1.0207562971110102e-21  -4.5168426040587537e-22  -6.8777092366278849e-25   6.9151336366985974e-34   9.7622161013232442e-35   2.0268318701698615e-35   6.5783670794213291e-36   9.6236056586729603e-03  -3.5887551810737269e-04   2.2993460554079087e-05  -2.7203893106550464e-09   3.4148728262087379e-21   8.7476534862291799e-22   5.7924280260541487e-22   3.7034551786812358e-24   1.4307574814225180e-33  -2.7621296777771984e-35   4.5774445110224558e-35  -2.0058371534156340e-35
  -4.3000088309019935e-01   1.7334495036104183e-01   3.6985004301055740e-03   1.6480571601648455e-05   2.8681473897595384e-07   1.0171240661836579e-08   2.2031542418536797e-22   6.8167192133958564e-22   1.6146163118961726e-22   2.5068070730555478e-25  -7.4237060676766139e-34   1.1924372511809118e-34  -4.6445467787040051e-35  -1.7954285959240737e-35   5.4272087911040531e-03  -5.9693134037289565e-04  -3.2334243422133462e-06   8.9418020132028795e-07   7.0455395129977775e-21  -5.5403149863149127e-22  -2.1790828000901819e-22  -2.3306253946883970e-24  -5.6607727310291579e-34  -1.6757499726680276e-34  -6.3533735251443201e-35   1.0045462073772818e-35
];

for korth=[0,3,7,10,12,14]
    [Q,R]=qr_internal( A, [], korth );
    assert_matrix( Q, {'unitary'}, sprintf( 'qroc_orth_Q_%d', korth ) );
    % assert_matrix( R, {'upper triangular'}, 'qroc_triu_R' ); muss nicht sein
    % TODO: umbenennen, um das auch auszusagen
    assert_equals( A, Q*R, 'qroc_eq_A_QR' );
end
A=[A A*(1+1e-11) A*(1+1e-13)];
for korth=[0,3,7,10,12,14]
    [Q,R]=qr_internal( A, [], korth );
    assert_matrix( Q, {'unitary'}, sprintf( 'qroc_orth_Q_%d', korth ) );
    % assert_matrix( R, {'upper triangular'}, 'qroc_triu_R' ); muss nicht sein
    % TODO: umbenennen, um das auch auszusagen
    assert_equals( A, Q*R, 'qroc_eq_A_QR' );
end




